(function display (join "\n" (map @(join " ") grid)))
(function create-grid x y (var grid (repeat (repeat " " x) y)) (display))
(function set-point x y sym 
  (let y-norm (- (dec (len grid)) (round y)))
  (var! grid (set-at [y-norm x] sym)))
(function plot fun sym
    (let traj (map (juxt val fun) (range (len grid)))
         traj-wall (take-until (fn [x y] (= "W" (-> grid x y))) traj))
    (map (fn [x y] (set-point x y sym)) traj-wall)
    (display))

(function game-start x-len y-len
    (create-grid x-len y-len)
    (set-point (rand-int x-len) (rand-int x-len) "T")
    (var bullet 97)
    (display))

(function parabolic-y-vel u a
  (* u (sin (* a (/ PI 180)))))
(function parabolic-x-vel u a
  (* u (cos (* a (/ PI 180)))))
(function parabolic-y velocity angle gravity time
  (- (* (parabolic-y-vel velocity angle) time) (* 0.5 gravity (** time 2))))
(function parabolic-throw velocity angle gravity x-coord
  (parabolic-y velocity angle gravity (/ x-coord (parabolic-x-vel velocity angle))))

(function shoot vel angl
    (var! grid map (remove (= (char-code (- bullet 2)))))
    (plot @(parabolic-throw vel angl 9.81) (char-code bullet))
    (var! bullet inc)
    (if ((flatten grid) "T") (str (display) "\nMiss!") (str (display) "\nYou win!")))

(function handler contents
  (let [command vel angl rest] (-> contents (split " ") (juxt 0 1 2 (comp (skip 3) (join " ")))))
  (print [command vel angl rest])
  (match command
         "new"        (game-start 32 15)
         "shoot"      (shoot (to-num vel) (to-num angl))
         "run"        (eval (strn vel " " angl " " rest))))
